* Haskell Game

** Dynamic Wires

   Okay, let's hash this out baby.

   inputWires ===> GAME CHUG ===> outputWires
       /\                             ||
       ||                             ||  
       ##=============================##

  gameStateWires :: Vector (Wire ...)

  #+BEGIN_SRC haskell -n
    doGame input_ sess_ wire gs = do
      void $ N.pollGLFW input_ ic
      (timeState, sess') <- stepSession sess_
      let game = stepWire wire timeState (Right ())
      (((b, wire'), input'), gs') <- runGame gs ic game
      swapBuffers win
      if gs' ^. gameStateShouldClose 
	then do
	-- Should probably stop all the sound producers here.
	return ((either (const $ error "mainWire inhibited and exited. (why!?)")
		  id
		  b, input'), gs')
	else doGame input' sess' (wire' <+> (concatA $ gs' ^. gameStateWires)) gs'
  #+END_SRC

  

** Getting an Entity from a Collision Object
   
   !!WARNING!!  UNSAFE NONSENSE AHEAD  !!WARNING!!
   ===============================================

   So, btCollisionObject has some methods to help.

   void(/*) (s/g)etUserPointer() (/const)
   (void/int) (s/g)etUserIndex() (/const)

   I think the \*UserPointer methods are actually *not* the way to
   go.  This is because Haskell uses a compacting generational
   garbage collector.  This means that a pointer to a regular haskell
   object can become invalid randomly, and we have no way of telling
   Haskell easily where it needs to update the pointers we already
   have in the case of compaction.

   Therefore, I think we should use \*UserIndex.  Just have a big 'ol
   Vector of every entity and stick an index in this Vector in the
   userIndex.

   Concerns:
   - Big ol' Vector would have to be immutable, in the sense that we
     can't reuse spaces that have already been use lest badness
     happens.

   Note: we did it this way!  Yay!
   
** Types

*** Camera

    A Camera should live in the physics world, because it can collide
    with objects.  It should attach to an object.

    It will look something like this:

    #+BEGIN_SRC haskell -n
      data Camera = Camera
	{ cameraTarget = <<Entity>>
	, cameraLocation = <<PhysicsEntity>>
	, 
	}
    #+END_SRC

*** Scripts

    Scripts are run-time loaded fragments of Haskell code, associated
    with particular objects.

    The interface would consist of an instance of a Script structure.

    #+BEGIN_SRC haskell -n
      data Script = Script 
	{ scriptID           :: ObjectID
	, scriptOwner        :: ObjectID
	, scriptSuperScripts :: Vector ScriptName
	, scriptName         :: ScriptName
	, scriptOnInit       :: GameState -> Game GameState
	, scriptOnLoad       :: GameState -> Game GameState
	, scriptOnEvent      :: Vector ( EventName
				       , forall a . Typeable a => a -> GameState -> Game GameState)
	, scriptOnUnload     :: GameState -> Game GameState
	, scriptOnExit       :: GameState -> Game GameState
	}
    #+END_SRC

    In reality, one would supply a source file that contained
    defintions of `name', `superScripts', `onInit', `onEvent', and so
    on, and the runtime would assign the owner and ID (since they
    can't be known at script-writing time, obviously).

    `superScripts' are dependencies.  Script names will be structured
    to help accomodate avoiding name clashes (i.e.
    "com.fizzixnerd.myScript").  Scripts will not run their `onInit'
    until all of their superScripts have run theirs.  Something
    something `onExit' reverse the order for clean-up?

    `onInit' is run if the script's object is loaded when the level
    begins.  Most scripts will not need this one, but I imagine most
    scripts will come in "packs" where there is one startup/shutdown
    script that sets up everything, and a bunch of other scripts
    choose this script as their `superScript'.  In this case, they can
    just be associated with a permanent dummy object.  Same idea with
    `onExit'.

    `onLoad' will run after the game has been initialized, at the
    point when the associated object is loaded.  Note that `onLoad'
    runs BEFORE any events are handled -- indeed, event registration
    happens after `onLoad'.  (For `onInit' scripts, this function is
    probably superfluous.)  For scripts associated to NPCs etc, this
    will be their AI.  When the associated object is unloaded,
    `onUnload' will be called, after which the event handlers will be
    deregistered (see below).

    `onEvent' is sort of fun.  Scripts will have to have some way of
    setting up their own events.  After doing so, they can register
    event handlers to them, or to other events set up in other ways.
    I guess this would be the recommended way of dealing with events,
    rather than binding everything to the tick event.  Anyways,
    `onEvent' is a Vector of EventNames that they want to bind to,
    along with the associated event handler.  EventNames can appear
    more than once.  They will be passed the Event's value, but will
    have to cast it themselves if they want to examine it.  This is
    the purpose of using Typeable.  If an EventName is not found, I
    guess it will be logged and nothing else will happen.

